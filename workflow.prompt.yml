messages:
  - role: system
    content: >-
      Thank you for clarifying your request and providing the attached image.
      Based on your description and the image, it appears you are referring to
      the "Model Git" section within a GitHub-related interface or configuration
      model (possibly a custom UI or a specific section in your Iranian Legal
      Archive System project). You want to know which prompt to enter in this
      "GitHub Model" section to resolve issues and ensure full functionality
      ("fully functional"). The image likely highlights the exact location
      within the system where this configuration should be applied, and I will
      assume it points to a settings or configuration panel related to GitHub
      integration (e.g., branch management, deployment, or merge functionality).


      Given the context of your previous messages—issues with "Compare and
      Merge" functionality and GitHub Pages deployment—the "Model Git" section
      likely pertains to a customizable model or script that manages GitHub
      operations (e.g., repository synchronization, workflow execution, or
      branch merging). The goal is to input a prompt that addresses these
      problems, ensuring the system operates with real, live data, and maintains
      the integrity of existing files in the `main` branch. As of 04:35 AM CEST
      on Thursday, September 04, 2025, I will provide a precise prompt to be
      entered into the "GitHub Model" section, tailored to resolve the
      identified issues and achieve full functionality.


      ---


      ### Exact Location to Enter the Prompt

      Based on the attached image (which I interpret as showing a configuration
      panel or settings area), you should enter the prompt in the **"Model
      Git"** text input field or configuration box within that section. This is
      typically where custom scripts, commands, or prompts are defined to
      control GitHub-related behavior. If the image shows a specific tab,
      button, or input labeled "Model Git" or "GitHub Model" (e.g., under
      Settings or a GitHub integration panel), paste the following prompt
      directly into that field. Ensure the field allows multi-line input or
      supports a script block, as the prompt includes detailed instructions.


      ---


      ### Prompt to Enter in the "GitHub Model" Section


      ```

      **Prompt for GitHub Model Agent: Major Comprehensive Update to Resolve
      GitHub Integration Issues and Ensure Full Functionality in Iranian Legal
      Archive System**


      **Subject:** Comprehensive Major Update to Resolve GitHub Integration
      Issues and Ensure Full Functionality for the Iranian Legal Archive System


      **Context:**  

      This prompt is executed by the GitHub Model Agent within the "Model Git"
      section of the Iranian Legal Archive System frontend in `dist/index.html`.
      The update addresses reported issues with "Compare and Merge"
      functionality and GitHub Pages deployment, ensuring seamless branch
      synchronization between `main` and `gh-pages`, with `main` as the primary
      branch. All existing files in the `main` branch must remain in their
      current positions and not be overwritten or displaced. The system is a
      React-based single-page application (SPA) with Persian right-to-left (RTL)
      support, utilizing HashRouter (`base: '/Aihoghoghi/'`). The update must
      ensure full functionality with real, live data—no placeholders,
      pseudocode, fake data, or deferred implementation—as of 04:35 AM CEST on
      Thursday, September 04, 2025. Embed all necessary configurations and
      scripts within `dist/index.html` to support this integration.


      **Execution Directives:**  

      1. **Mandatory Compliance and Update Scope:**  
         - Execute this update immediately within the "Model Git" section, resolving all GitHub integration issues (e.g., non-responsive "Compare and Merge", deployment failures).  
         - Ensure `main` remains the primary branch, with automatic synchronization to `gh-pages` for GitHub Pages deployment.  
         - Preserve all existing files in `main` (e.g., `src/`, `dist/`, `vite.config.js`) in their current positions, modifying only GitHub-related configurations.  
         - Use only real, live data from the backend; eliminate placeholders, pseudocode, or fake data. Fully implement all changes now.  
         - Maintain functional CSS, RTL layout (`dir="rtl"`), Persian support, and interactive elements (buttons, forms, tabs, inputs) with real-time feedback.

      2. **File Paths and Locations for Update:**  
         - Update `dist/index.html` directly, embedding CSS in `<head>` with `<style>` tags (Tailwind CSS: `https://cdn.tailwindcss.com`, custom RTL styles) and JavaScript in `<body>` with `<script>` tags.  
         - Integrate services from:  
           - `./src/services/systemIntegration.js` (703 lines).  
           - `./src/services/enhancedAIService.js` (733 lines).  
           - `./src/services/smartScrapingService.js` (557 lines).  
           - `./src/services/legalDocumentService.js` (655 lines).  
           - `./src/services/realTimeMetricsService.js` (477 lines).  
         - Reference backend utilities:  
           - `./utils/orchestrator.py` (712 lines).  
           - `./utils/ai_classifier.py` (427 lines).  
           - `./utils/proxy_manager.py` (423 lines).  
           - `./utils/legal_database.py` (693 lines).  
         - Integrate components from `./src/components/pages/`: `Dashboard.jsx`, `SearchDatabase.jsx`, `ScrapingInterface.jsx`, `AIAnalysis.jsx`, `Settings.jsx`.  
         - Add GitHub-specific files (e.g., `.github/workflows/`) to `main` without altering existing locations.

      3. **Backend API Endpoints (Fully Functional with Real Data):**  
         - **Base URL:** `http://127.0.0.1:7860/api` (local) / `https://your-domain.com/api` (production).  
         - **Endpoints (in `./web_server.py`, 773 lines):**  
           - `/api/models/load` (POST): Load real Persian BERT models.  
           - `/api/models/status` (GET): Real model health.  
           - `/api/documents/process` (POST): Real-time processing.  
           - `/api/documents/search` (POST): Real full-text search.  
           - `/api/documents/semantic-search` (POST): Real semantic search.  
           - `/api/documents/nafaqe-search` (POST): Real family law search.  
           - `/api/proxies/status` (GET): Real proxy health.  
           - `/api/system/metrics` (GET): Real system metrics.  
         - Implement CORS:  
           ```python
           app.add_middleware(
               CORSMiddleware,
               allow_origins=["*"],
               allow_credentials=True,
               allow_methods=["*"],
               allow_headers=["*"]
           )
           ```

      4. **Core Functional Requirements (Fully Implemented):**  
         - **Diagnose and Fix GitHub Integration Issues:**  
           - Identify and resolve the non-responsive "Compare and Merge" issue (e.g., branch protection rules, workflow errors).  
           - Configure the GitHub Model Agent to automate:  
             - Repository synchronization between `main` and `gh-pages`.  
             - Workflow execution via `.github/workflows/deploy.yml`:  
               ```yaml
               name: Deploy to GitHub Pages with Compare and Merge
               on:
                 push:
                   branches: [main]
                 pull_request:
                   branches: [main, gh-pages]
               jobs:
                 build-and-deploy:
                   runs-on: ubuntu-latest
                   steps:
                     - uses: actions/checkout@v3
                     - uses: actions/setup-node@v3
                       with:
                         node-version: '18'
                     - run: npm install
                     - run: npm run build
                     - run: |
                         touch dist/.nojekyll
                         cp public/404.html dist/
                     - name: Deploy
                       uses: peaceiris/actions-gh-pages@v3
                       with:
                         github_token: ${{ secrets.GITHUB_TOKEN }}
                         publish_dir: ./dist
                         publish_branch: gh-pages
                         allow_empty_commit: true
                 check-pr:
                   runs-on: ubuntu-latest
                   steps:
                     - uses: actions/checkout@v3
                     - run: npm install
                     - run: npm run lint
                     - run: npm run test
               ```  
             - Merge validation with real-time feedback in the UI.  
           - Update `vite.config.js` for GitHub Pages:  
             ```javascript
             export default defineConfig({
                 base: '/Aihoghoghi/',
                 build: {
                     rollupOptions: {
                         output: {
                             assetFileNames: 'assets/[name]-[hash][extname]',
                             manualChunks: {
                                 vendor: ['react', 'react-dom'],
                                 router: ['react-router-dom'],
                                 query: ['@tanstack/react-query'],
                                 ui: ['framer-motion', 'lucide-react']
                             }
                         }
                     }
                 }
             });
             ```  
           - Add `404.html` redirect in `dist/`:  
             ```html
             <script>
             (function() {
                 var l = window.location;
                 var basePath = '/Aihoghoghi/';
                 var requestedRoute = l.pathname.replace(basePath, '');
                 var redirectUrl = l.protocol + '//' + l.hostname + basePath + '#/' + requestedRoute;
                 if (l.search) redirectUrl += l.search;
                 l.replace(redirectUrl);
             })();
             </script>
             ```  
         - **Main Tabs and Sub-Tabs (Fully Functional):**  
           - **Dashboard:** Real metrics with "بروزرسانی متریک‌ها".  
           - **Search:** Sub-tabs Text Search, Semantic Search, Nafaqe Search with real results.  
           - **Scraping:** Sub-sections URL Input, File Upload, Proxy Selection with "شروع استخراج".  
           - **AI Analysis:** Sub-sections Classification, NER, Sentiment, Summarization with real scores.  
           - **Settings:** Sub-sections API Configuration, Proxy Settings with "تست اتصال" and "ذخیره تنظیمات".  
         - **System Status, Model Management, API Settings, Proxy Management, Document Processing, Data Preview:** Fully functional with real data.

      5. **Initialization Sequence (Fully Functional):**  
         - Implement in `<script>`:  
           ```javascript
           window.addEventListener('load', async function() {
               showLoading('در حال راه‌اندازی سیستم...');
               try {
                   const backendInit = await fetch('http://127.0.0.1:7860/api/system/init', { method: 'POST', headers: {'Content-Type': 'application/json'} });
                   const initData = await backendInit.json();
                   await Promise.all([
                       systemIntegration.initialize(),
                       enhancedAIService.loadModels(),
                       proxyManager.initializeProxies(),
                       legalDocumentService.connectDatabase(),
                       realTimeMetricsService.initialize()
                   ]);
                   connectWebSocket('wss://your-domain.com/ws');
                   const initialData = await loadInitialData();
                   updateRealTimeMetrics(initialData.metrics);
                   showToast('سیستم با موفقیت راه‌اندازی شد: ' + initData.status, 'success');
               } catch (error) {
                   console.error('Initialization error:', error);
                   showToast('خطا در راه‌اندازی سیستم: ' + error.message, 'error');
               } finally {
                   hideLoading();
               }
           });
           ```

      6. **Real-Time WebSocket (Fully Operational):**  
         - Use `wss://your-domain.com/ws` with reconnection and polling fallback.

      7. **UI/UX Requirements (Fully Functional):**  
         - Embed CSS in `<style>` (Tailwind with Framer Motion). External: Chart.js, Font Awesome, Vazirmatn Font.  
         - Responsive RTL design, real loading states.

      8. **Deployment & Testing:**  
         - Use GitHub Pages via updated `.github/workflows/deploy.yml`.  
         - Write Vitest tests for 90% coverage.

      9. **Performance & Security:**  
         - Optimize load time, bundle size, with security headers and rate limiting.

      10. **Preservation & Validation:**  
          - Preserve existing `main` files; validate all elements, including GitHub operations, work with real data.

      **Output Instructions:**  

      - Update `dist/index.html` with this configuration, ensuring full GitHub
      functionality. Await further commands.

      ```


      ---


      ### Instructions for Implementation

      1. **Locate the "Model Git" Section:** Open the interface shown in the
      attached image and navigate to the "Model Git" or "GitHub Model" input
      field or configuration area.

      2. **Paste the Prompt:** Copy the entire prompt above and paste it into
      the designated text input or script box within the "Model Git" section.
      Ensure the field supports multi-line input; if it does not, you may need
      to adjust the format to a single line or consult the system documentation
      for the correct input method.

      3. **Execute the Configuration:** After pasting, save or apply the changes
      (e.g., click a "Save" or "Apply" button if available). The agent should
      then process the prompt and update the system accordingly.

      4. **Verify Functionality:** Test the "Compare and Merge" action and
      GitHub Pages deployment to confirm the issues are resolved. Check the
      GitHub Actions logs for any errors if the problem persists.


      ### Additional Notes

      - If the "Model Git" section has specific syntax requirements (e.g., JSON,
      YAML, or a custom format), adapt the prompt accordingly while preserving
      its core directives. For example, if it expects a JSON object, convert the
      prompt into a structured format like:
        ```json
        {
          "subject": "Comprehensive Major Update to Resolve GitHub Integration Issues...",
          "context": "...",
          "executionDirectives": {
            "mandatoryCompliance": "...",
            "filePaths": "...",
            "backendAPI": "...",
            "coreFunctionalRequirements": {
              "diagnoseAndFix": "...",
              "mainTabs": "..."
            },
            "initializationSequence": "...",
            "webSocket": "...",
            "uiUxRequirements": "...",
            "deploymentAndTesting": "...",
            "performanceAndSecurity": "...",
            "preservationAndValidation": "..."
          },
          "outputInstructions": "..."
        }
        ```
      - If the agent does not execute automatically, ensure the system is
      configured to interpret the prompt as an executable script or command.


      This prompt, when entered into the "Model Git" section, should resolve the
      GitHub integration issues, including the "Compare and Merge" problem, and
      ensure the system is fully functional with real data. If further
      adjustments are needed, please provide additional details or the exact
      error messages encountered.
model: openai/gpt-4o
